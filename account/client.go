package account

import (
	"context"

	"github.com/ranjannkumar/go-grpc-grpahql-microservice/account/pb"

	"google.golang.org/grpc"
)

type Client struct {
	// This field holds the gRPC client connection to the server.
	//  This connection manages the underlying network stream.
	conn *grpc.ClientConn
	//  This field holds an instance of the gRPC service client generated by protoc.
	//  This client provides the methods that directly correspond to the RPCs defined in your AccountService in the .proto file 
	// (e.g., PostAccount, GetAccount, GetAccounts).
	service pb.AccountServiceClient
}

func NewClient(url string)(*Client,error){
	conn,err := grpc.Dial(url,grpc.WithInsecure())
	if err != nil{
		return nil,err
	}
	c := pb.NewAccountServiceClient(conn)
	return &Client{conn,c},nil
}

func (c *Client)Close(){
	c.conn.Close()
}

func(c *Client)PostAccount(ctx context.Context,name string)(*Account,error){
	r,err:= c.service.PostAccount(
		ctx,
		&pb.PostAccountRequest{Name: name},
	)
	if err!=nil{
		return nil,err
	}
	return &Account{
		ID: r.Account.Id,
		Name: r.Account.Name,
	},nil
}

func(c *Client)GetAccount(ctx context.Context,id string)(*Account,error){
	r,err := c.service.GetAccount(
		ctx,
		&pb.GetAccountRequest{Id: id},
	)
	if err !=nil{
		return nil,err
	}
	return &Account{
		ID: r.Account.Id,
		Name: r.Account.Name,
	},nil
}

func(c *Client)GetAccounts(ctx context.Context,skip uint64,take uint64)([]Account,error){
	r,err := c.service.GetAccounts(
		ctx,
		&pb.GetAccountsRequest{
			Skip: skip,
			Take: take,
		},
	)
	if err !=nil{
		return nil,err
	}
	accounts := []Account{}
	for _,a := range r.Accounts{
		accounts = append(accounts, Account{
			ID: a.Id,
			Name: a.Name,
		})
	}
	return accounts,nil
}

